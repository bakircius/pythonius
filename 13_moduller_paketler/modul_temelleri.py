"""
Python Mod√ºller ve Paketler

Bu dosya Python'da mod√ºl sistemi, import mekanizmasƒ±, paket olu≈üturma,
namespace'ler ve mod√ºl organizasyonu konularƒ±nƒ± kapsamlƒ± olarak ele alƒ±r.
"""

import sys
import os
import importlib
import inspect
from pathlib import Path
import json
import pickle
from types import ModuleType
import pkgutil

# =============================================================================
# 1. MOD√úL KAVRAMII VE TEMEL KULLANIM
# =============================================================================

print("=== Mod√ºl Kavramƒ± ve Temel Kullanƒ±m ===")

def modul_temellerine_giris():
    """Mod√ºl sistemine giri≈ü"""
    
    print("üìö Mod√ºl Nedir?")
    print("‚Ä¢ Mod√ºl: Python kodunu organize etmek i√ßin kullanƒ±lan dosyadƒ±r (.py)")
    print("‚Ä¢ Her .py dosyasƒ± bir mod√ºld√ºr")
    print("‚Ä¢ Mod√ºller fonksiyon, sƒ±nƒ±f ve deƒüi≈ükenleri organize eder")
    print("‚Ä¢ import keyword'√º ile kullanƒ±lƒ±r")
    
    print(f"\nüìÇ Bu mod√ºl√ºn bilgileri:")
    print(f"‚Ä¢ Mod√ºl adƒ±: {__name__}")
    print(f"‚Ä¢ Dosya yolu: {__file__}")
    if hasattr(__builtins__, '__doc__'):
        print(f"‚Ä¢ Docstring: {__doc__[:100]}...")
    
    # Mevcut mod√ºldeki isimler
    print(f"\nüîç Bu mod√ºldeki isimler:")
    local_names = [name for name in dir() if not name.startswith('_')]
    print(f"‚Ä¢ Toplam {len(local_names)} genel isim")
    print(f"‚Ä¢ ƒ∞lk 10 isim: {local_names[:10]}")

modul_temellerine_giris()

# =============================================================================
# 2. ƒ∞MPORT MEKANƒ∞ZMASI
# =============================================================================

print("\n=== Import Mekanizmasƒ± ===")

def import_ornekleri():
    """Farklƒ± import y√∂ntemleri"""
    
    print("--- Standard Library Import ---")
    
    # Temel import
    import math
    print(f"math mod√ºl√º: {math}")
    print(f"math.pi: {math.pi}")
    print(f"math.sqrt(16): {math.sqrt(16)}")
    
    # from import
    from math import sqrt, pi, sin
    print(f"Direkt sqrt(25): {sqrt(25)}")
    print(f"Direkt pi: {pi}")
    
    # Alias import
    import datetime as dt
    now = dt.datetime.now()
    print(f"≈ûimdiki zaman (datetime as dt): {now}")
    
    # from import with alias
    from collections import defaultdict as dd
    sayac = dd(int)
    sayac['a'] += 1
    print(f"defaultdict as dd: {dict(sayac)}")
    
    # Wildcard import (dikkatli kullanƒ±n!)
    print("\n--- Wildcard Import (dikkatli!) ---")
    # from math import *  # T√ºm isimleri import eder
    print("from math import * -> T√ºm math fonksiyonlarƒ± namespace'e gelir")
    print("‚ö†Ô∏è  Wildcard import namespace kirliliƒüi yaratabilir")
    
    # Multiple import
    print("\n--- Multiple Import ---")
    from os import path, getcwd, listdir
    print(f"√áalƒ±≈üma dizini: {getcwd()}")
    
    # Conditional import
    print("\n--- Conditional Import ---")
    try:
        import numpy as np
        print("‚úÖ NumPy bulundu")
        print(f"NumPy versiyonu: {np.__version__}")
    except ImportError:
        print("‚ùå NumPy bulunamadƒ±")
        np = None
    
    # Late import (fonksiyon i√ßinde)
    def gerektiginde_import():
        import random  # Sadece bu fonksiyon √ßaƒürƒ±ldƒ±ƒüƒ±nda import edilir
        return random.randint(1, 100)
    
    print(f"Late import sonucu: {gerektiginde_import()}")

import_ornekleri()

# =============================================================================
# 3. MOD√úL ARAMA YOLU (MODULE SEARCH PATH)
# =============================================================================

print("\n=== Mod√ºl Arama Yolu ===")

def modul_arama_yolu():
    """Python'ƒ±n mod√ºl arama mekanizmasƒ±"""
    
    print("üîç Python Mod√ºl Arama Sƒ±rasƒ±:")
    print("1. Yerle≈üik mod√ºller (built-in)")
    print("2. √áalƒ±≈üma dizini")
    print("3. PYTHONPATH environment variable")
    print("4. Standard library")
    print("5. Site-packages (third-party)")
    
    print(f"\nüìÇ sys.path i√ßeriƒüi:")
    for i, path in enumerate(sys.path, 1):
        print(f"  {i}. {path}")
    
    # Mod√ºl lokasyonu bulma
    import json
    print(f"\nüìç json mod√ºl√ºn√ºn lokasyonu: {json.__file__}")
    
    import os
    print(f"üìç os mod√ºl√ºn√ºn lokasyonu: {os.__file__}")
    
    # Yerle≈üik mod√ºller
    print(f"\nüèóÔ∏è  Yerle≈üik mod√ºller sayƒ±sƒ±: {len(sys.builtin_module_names)}")
    print(f"ƒ∞lk 10 yerle≈üik mod√ºl: {list(sys.builtin_module_names)[:10]}")
    
    # Yeni path ekleme
    print("\n‚ûï sys.path'e yeni dizin ekleme:")
    new_path = "/tmp/my_modules"
    if new_path not in sys.path:
        sys.path.append(new_path)
        print(f"‚úÖ Eklendi: {new_path}")
    else:
        print(f"‚ö†Ô∏è  Zaten var: {new_path}")

modul_arama_yolu()

# =============================================================================
# 4. MOD√úL √ñZELLƒ∞KLERƒ∞ VE ATTRƒ∞BUTLARI
# =============================================================================

print("\n=== Mod√ºl √ñzellikleri ===")

def modul_ozellikleri():
    """Mod√ºl √∂zellikleri ve meta bilgileri"""
    
    import math
    
    print("--- Mod√ºl Attributlarƒ± ---")
    print(f"math.__name__: {math.__name__}")
    print(f"math.__file__: {getattr(math, '__file__', 'C extension')}")
    print(f"math.__doc__: {math.__doc__[:100]}...")
    
    # Mod√ºl i√ßeriƒüini listele
    print(f"\n--- math Mod√ºl√º ƒ∞√ßeriƒüi ---")
    math_items = dir(math)
    functions = [item for item in math_items if callable(getattr(math, item)) and not item.startswith('_')]
    constants = [item for item in math_items if not callable(getattr(math, item)) and not item.startswith('_')]
    
    print(f"üìä Toplam √∂ƒüe: {len(math_items)}")
    print(f"üîß Fonksiyon sayƒ±sƒ±: {len(functions)}")
    print(f"üìå Sabit sayƒ±sƒ±: {len(constants)}")
    print(f"üîß Bazƒ± fonksiyonlar: {functions[:5]}")
    print(f"üìå Sabitler: {constants}")
    
    # Mod√ºl tipi kontrol√º
    print(f"\n--- Mod√ºl Tipi ---")
    print(f"math mod√ºl t√ºr√º: {type(math)}")
    print(f"ModuleType instance: {isinstance(math, ModuleType)}")
    
    # Inspect mod√ºl√º ile detay
    print(f"\n--- Inspect ile Analiz ---")
    if inspect.ismodule(math):
        print("‚úÖ math bir mod√ºld√ºr")
        
        # Mod√ºl √ºyelerini kategorize et
        members = inspect.getmembers(math)
        functions = inspect.getmembers(math, inspect.isfunction)
        builtins = inspect.getmembers(math, inspect.isbuiltin)
        
        print(f"üìä Toplam √ºye: {len(members)}")
        print(f"üîß Python fonksiyon: {len(functions)}")
        print(f"‚öôÔ∏è  Built-in fonksiyon: {len(builtins)}")

modul_ozellikleri()

# =============================================================================
# 5. Dƒ∞NAMƒ∞K ƒ∞MPORT
# =============================================================================

print("\n=== Dinamik Import ===")

def dinamik_import_ornekleri():
    """Runtime'da dinamik mod√ºl import etme"""
    
    print("--- importlib.import_module ---")
    
    # String ile mod√ºl import
    module_name = "json"
    json_module = importlib.import_module(module_name)
    print(f"Dinamik import: {module_name} -> {json_module}")
    
    # JSON test
    test_data = {"test": "ba≈üarƒ±lƒ±"}
    json_string = json_module.dumps(test_data)
    print(f"JSON test: {json_string}")
    
    # Paket alt mod√ºl√º import
    try:
        urllib_parse = importlib.import_module("urllib.parse")
        print(f"Alt mod√ºl import: urllib.parse -> {urllib_parse}")
    except ImportError as e:
        print(f"Import hatasƒ±: {e}")
    
    # Ko≈üullu dinamik import
    print("\n--- Ko≈üullu Dinamik Import ---")
    
    def get_json_module():
        """En uygun JSON mod√ºl√ºn√º d√∂nd√ºr"""
        try:
            # √ñnce orjson'ƒ± dene (hƒ±zlƒ±)
            return importlib.import_module("orjson")
        except ImportError:
            try:
                # Sonra ujson'ƒ± dene (hƒ±zlƒ±)
                return importlib.import_module("ujson")
            except ImportError:
                # Son √ßare standart json
                return importlib.import_module("json")
    
    json_mod = get_json_module()
    print(f"Se√ßilen JSON mod√ºl√º: {json_mod.__name__}")
    
    # Plugin sistemi sim√ºlasyonu
    print("\n--- Plugin Sistemi Sim√ºlasyonu ---")
    
    def load_plugin(plugin_name):
        """Plugin y√ºkleme sim√ºlasyonu"""
        try:
            plugin = importlib.import_module(plugin_name)
            print(f"‚úÖ Plugin y√ºklendi: {plugin_name}")
            return plugin
        except ImportError:
            print(f"‚ùå Plugin bulunamadƒ±: {plugin_name}")
            return None
    
    # Test plugin'leri
    plugins = ["math", "random", "nonexistent_plugin"]
    loaded_plugins = {}
    
    for plugin_name in plugins:
        plugin = load_plugin(plugin_name)
        if plugin:
            loaded_plugins[plugin_name] = plugin
    
    print(f"Y√ºklenen plugin sayƒ±sƒ±: {len(loaded_plugins)}")

dinamik_import_ornekleri()

# =============================================================================
# 6. MOD√úL CACHE VE RELOAD
# =============================================================================

print("\n=== Mod√ºl Cache ve Reload ===")

def modul_cache_ornekleri():
    """Mod√ºl cache sistemi ve reload i≈ülemleri"""
    
    print("--- sys.modules Cache ---")
    
    # Cache'teki mod√ºl sayƒ±sƒ±
    print(f"Cache'teki mod√ºl sayƒ±sƒ±: {len(sys.modules)}")
    
    # Bazƒ± mod√ºlleri listele
    loaded_modules = list(sys.modules.keys())[:10]
    print(f"ƒ∞lk 10 y√ºkl√º mod√ºl: {loaded_modules}")
    
    # Belirli mod√ºl√ºn cache durumu
    if "json" in sys.modules:
        print("‚úÖ json mod√ºl√º cache'te")
        print(f"json mod√ºl objesi: {sys.modules['json']}")
    
    # Mod√ºl silme (dikkatli!)
    print("\n--- Mod√ºl Cache Manip√ºlasyonu ---")
    
    # Test mod√ºl√º import et
    import uuid
    print(f"uuid mod√ºl√º y√ºklendi: {uuid in sys.modules.values()}")
    
    # Cache'ten kaldƒ±r (dikkatli!)
    if "uuid" in sys.modules:
        uuid_module = sys.modules["uuid"]
        print(f"UUID mod√ºl id √∂ncesi: {id(uuid_module)}")
        
        # Yeniden import (cache'ten gelir)
        import uuid as uuid2
        print(f"UUID mod√ºl id sonrasƒ±: {id(uuid2)}")
        print(f"Aynƒ± obje: {uuid_module is uuid2}")
    
    # importlib.reload
    print("\n--- importlib.reload ---")
    
    # Not: reload sadece development i√ßin kullanƒ±lmalƒ±
    print("‚ö†Ô∏è  importlib.reload() production'da kullanƒ±lmamalƒ±")
    print("‚Ä¢ Sadece development/debugging i√ßin")
    print("‚Ä¢ Memory leak'e sebep olabilir")
    print("‚Ä¢ Side effect'leri olabilir")
    
    try:
        import math
        math_before = id(math)
        
        # Reload (dikkatli!)
        math_reloaded = importlib.reload(math)
        math_after = id(math_reloaded)
        
        print(f"Math id √∂ncesi: {math_before}")
        print(f"Math id sonrasƒ±: {math_after}")
        print(f"Farklƒ± obje: {math_before != math_after}")
        
    except Exception as e:
        print(f"Reload hatasƒ±: {e}")

modul_cache_ornekleri()

# =============================================================================
# 7. __INIT__.PY VE PAKET YAPISI
# =============================================================================

print("\n=== __init__.py ve Paket Yapƒ±sƒ± ===")

def paket_yapisi_ornekleri():
    """Python paket sistemi"""
    
    print("üì¶ Python Paket Sistemi:")
    print("‚Ä¢ Paket: Mod√ºlleri organize eden dizin")
    print("‚Ä¢ __init__.py: Paketi tanƒ±mlayan dosya")
    print("‚Ä¢ Alt paketler: ƒ∞√ß i√ße paket yapƒ±sƒ±")
    print("‚Ä¢ Namespace paketler: __init__.py olmadan")
    
    # √ñrnek paket yapƒ±sƒ±
    print(f"\nüèóÔ∏è  √ñrnek Paket Yapƒ±sƒ±:")
    example_structure = """
    mypackage/
        __init__.py          # Paket tanƒ±mƒ±
        core/
            __init__.py      # Alt paket
            utils.py         # Mod√ºl
            helpers.py       # Mod√ºl
        web/
            __init__.py      # Alt paket
            server.py        # Mod√ºl
            client.py        # Mod√ºl
        tests/
            __init__.py
            test_core.py
    """
    print(example_structure)
    
    # Standard library paket √∂rneƒüi
    print("--- Standard Library Paket √ñrnekleri ---")
    
    # urllib paketi
    import urllib
    print(f"urllib paketi: {urllib}")
    print(f"urllib.__file__: {getattr(urllib, '__file__', 'Namespace package')}")
    print(f"urllib.__path__: {getattr(urllib, '__path__', 'No path')}")
    
    # urllib alt mod√ºlleri
    try:
        import urllib.parse
        import urllib.request
        print("‚úÖ urllib.parse ve urllib.request y√ºklendi")
    except ImportError as e:
        print(f"‚ùå urllib alt mod√ºl hatasƒ±: {e}")
    
    # collections paketi
    import collections
    print(f"\ncollections paketi: {collections}")
    
    # collections'dan spesifik import
    from collections import defaultdict, Counter, deque
    print("‚úÖ collections'dan spesifik sƒ±nƒ±flar import edildi")
    
    # __all__ kullanƒ±mƒ±
    print(f"\n--- __all__ Attributƒ± ---")
    if hasattr(collections, '__all__'):
        print(f"collections.__all__: {collections.__all__[:5]}...")
    else:
        print("collections.__all__ tanƒ±mlƒ± deƒüil")

paket_yapisi_ornekleri()

# =============================================================================
# 8. NAMESPACE PACKAGES
# =============================================================================

print("\n=== Namespace Packages ===")

def namespace_packages():
    """PEP 420 Namespace Packages"""
    
    print("üåê Namespace Packages (PEP 420):")
    print("‚Ä¢ __init__.py dosyasƒ± olmayan paketler")
    print("‚Ä¢ Birden fazla lokasyonda olabilir")
    print("‚Ä¢ Implicit namespace packages")
    print("‚Ä¢ Distribution'lar arasƒ± payla≈üƒ±m")
    
    # pkgutil ile namespace exploration
    print(f"\n--- Namespace Package Detection ---")
    
    def explore_package(package_name):
        """Paket yapƒ±sƒ±nƒ± ke≈üfet"""
        try:
            package = importlib.import_module(package_name)
            print(f"\nüì¶ {package_name}:")
            print(f"  Type: {type(package)}")
            print(f"  File: {getattr(package, '__file__', 'No file (namespace?)')}")
            print(f"  Path: {getattr(package, '__path__', 'No path')}")
            
            # Alt mod√ºlleri listele
            if hasattr(package, '__path__'):
                try:
                    submodules = []
                    for importer, modname, ispkg in pkgutil.iter_modules(package.__path__):
                        submodules.append(f"{'üì¶' if ispkg else 'üìÑ'} {modname}")
                    
                    if submodules:
                        print(f"  Sub-modules: {submodules[:5]}")
                        if len(submodules) > 5:
                            print(f"    ... ve {len(submodules) - 5} daha")
                    else:
                        print("  Sub-modules: Yok")
                        
                except Exception as e:
                    print(f"  Alt mod√ºl listesi alƒ±namadƒ±: {e}")
                    
        except ImportError:
            print(f"‚ùå {package_name} import edilemedi")
    
    # Bazƒ± paketleri ke≈üfet
    packages_to_explore = ["urllib", "collections", "email", "json"]
    
    for pkg in packages_to_explore:
        explore_package(pkg)

namespace_packages()

# =============================================================================
# 9. MOD√úL VE PAKET OLU≈ûTURMA
# =============================================================================

print("\n=== Mod√ºl ve Paket Olu≈üturma ===")

def modul_paket_olusturma():
    """Kendi mod√ºl ve paketlerimizi olu≈üturma"""
    
    print("üõ†Ô∏è  Kendi Mod√ºl√ºm√ºz√º Olu≈üturalƒ±m:")
    
    # Basit mod√ºl i√ßeriƒüi
    simple_module_content = '''"""
Basit matematik i≈ülemleri mod√ºl√º

Bu mod√ºl temel matematik i≈ülemlerini i√ßerir.
"""

__version__ = "1.0.0"
__author__ = "Python √ñƒürencisi"

def toplama(a, b):
    """ƒ∞ki sayƒ±yƒ± topla"""
    return a + b

def carpma(a, b):
    """ƒ∞ki sayƒ±yƒ± √ßarp"""
    return a * b

def kare(x):
    """Sayƒ±nƒ±n karesini al"""
    return x ** 2

# Mod√ºl y√ºklendiƒüinde √ßalƒ±≈üacak kod
print(f"Matematik mod√ºl√º y√ºklendi (versiyon {__version__})")

# __all__ ile public API tanƒ±mla
__all__ = ['toplama', 'carpma', 'kare']
'''
    
    # Mod√ºl√º dosyaya yaz
    module_path = Path("matematik.py")
    try:
        with open(module_path, "w", encoding="utf-8") as f:
            f.write(simple_module_content)
        print(f"‚úÖ Mod√ºl olu≈üturuldu: {module_path}")
        
        # Olu≈üturduƒüumuz mod√ºl√º import et
        if str(Path.cwd()) not in sys.path:
            sys.path.insert(0, str(Path.cwd()))
        
        # Import √∂ncesi cache temizle
        if "matematik" in sys.modules:
            del sys.modules["matematik"]
        
        import matematik
        print(f"üì¶ Mod√ºl import edildi: {matematik}")
        print(f"üî¢ Toplama testi: 3 + 5 = {matematik.toplama(3, 5)}")
        print(f"üî¢ Kare testi: 4¬≤ = {matematik.kare(4)}")
        print(f"üìã __all__: {matematik.__all__}")
        
    except Exception as e:
        print(f"‚ùå Mod√ºl olu≈üturma hatasƒ±: {e}")
    
    # Paket yapƒ±sƒ± olu≈üturma √∂rneƒüi
    print(f"\nüèóÔ∏è  Paket Yapƒ±sƒ± √ñrneƒüi:")
    
    package_structure = {
        "mypackage": {
            "__init__.py": '''"""
MyPackage - √ñrnek Python Paketi

Bu paket √ße≈üitli utility'leri i√ßerir.
"""

__version__ = "1.0.0"

# Alt mod√ºllerden import
from .core import hello
from .utils import format_text

# Public API
__all__ = ['hello', 'format_text']
''',
            "core.py": '''"""
Core functionality
"""

def hello(name="D√ºnya"):
    """Selamlama fonksiyonu"""
    return f"Merhaba, {name}!"

def goodbye(name="D√ºnya"):
    """Veda fonksiyonu"""
    return f"Ho≈ü√ßakal, {name}!"
''',
            "utils.py": '''"""
Utility functions
"""

def format_text(text, upper=False):
    """Metni formatla"""
    if upper:
        return text.upper()
    return text.lower()

def reverse_text(text):
    """Metni ters √ßevir"""
    return text[::-1]
'''
        }
    }
    
    print("Paket yapƒ±sƒ±:")
    for folder, files in package_structure.items():
        print(f"üìÅ {folder}/")
        for filename, content in files.items():
            print(f"  üìÑ {filename}")

modul_paket_olusturma()

# =============================================================================
# 10. MOD√úL DOK√úMANTASYONU VE METADAta
# =============================================================================

print("\n=== Mod√ºl Dok√ºmantasyonu ===")

def modul_dokumantasyonu():
    """Mod√ºl dok√ºmantasyonu ve metadata best practices"""
    
    print("üìö Mod√ºl Dok√ºmantasyonu Best Practices:")
    
    # √ñrnek mod√ºl header
    example_header = '''"""
mod√ºl_adƒ± - Kƒ±sa a√ßƒ±klama

Mod√ºl√ºn detaylƒ± a√ßƒ±klamasƒ± burada yer alƒ±r.
Kullanƒ±m √∂rnekleri ve API a√ßƒ±klamalarƒ± dahildir.

Author: ƒ∞sim Soyisim <email@example.com>
License: MIT
Version: 1.0.0
Python: >=3.8

Example:
    Basic usage:
    
    >>> from modul_adi import function_name
    >>> result = function_name(argument)
    >>> print(result)
    'Expected output'

Note:
    Bu mod√ºl Python 3.8+ gerektirir.
    Ek baƒüƒ±mlƒ±lƒ±klar: requests, numpy

Todo:
    * ƒ∞yile≈ütirme planlarƒ±
    * Yeni √∂zellik fikirleri
"""

__version__ = "1.0.0"
__author__ = "ƒ∞sim Soyisim"
__email__ = "email@example.com"
__license__ = "MIT"
__copyright__ = "Copyright 2024, ƒ∞sim Soyisim"
__status__ = "Development"  # "Prototype", "Development", "Production"
__maintainer__ = "ƒ∞sim Soyisim"
__credits__ = ["Contributor1", "Contributor2"]

# Compatibility
__python_requires__ = ">=3.8"
__dependencies__ = ["requests>=2.25.0", "numpy>=1.19.0"]
'''
    
    print("--- Metadata √ñrnegi ---")
    print(example_header[:500] + "...")
    
    # Ger√ßek mod√ºl metadata √∂rneƒüi
    print(f"\n--- json Mod√ºl√º Metadata ---")
    import json
    
    metadata_attrs = [
        '__name__', '__doc__', '__file__', '__package__',
        '__version__', '__author__'
    ]
    
    for attr in metadata_attrs:
        value = getattr(json, attr, 'Tanƒ±mlƒ± deƒüil')
        if attr == '__doc__' and value:
            value = value[:100] + "..." if len(value) > 100 else value
        print(f"{attr}: {value}")
    
    # Help sistemi
    print(f"\n--- Help Sistemi ---")
    print("Python'da help() fonksiyonu mod√ºl dok√ºmantasyonunu g√∂sterir:")
    print("help(json)  # JSON mod√ºl√º yardƒ±mƒ±")
    print("help(json.dumps)  # Spesifik fonksiyon yardƒ±mƒ±")
    
    # Docstring konventions
    print(f"\n--- Docstring Konventions ---")
    print("üìù PEP 257 - Docstring Conventions:")
    print("‚Ä¢ ƒ∞lk satƒ±r kƒ±sa √∂zet")
    print("‚Ä¢ Bo≈ü satƒ±r")
    print("‚Ä¢ Detaylƒ± a√ßƒ±klama")
    print("‚Ä¢ Args, Returns, Raises b√∂l√ºmleri")
    print("‚Ä¢ Examples kullanƒ±mƒ±")

modul_dokumantasyonu()

# =============================================================================
# 11. MOD√úL BEST PRACTICES
# =============================================================================

print("\n=== Mod√ºl Best Practices ===")

def modul_best_practices():
    """Mod√ºl geli≈ütirme best practices"""
    
    print("üèÜ Mod√ºl Geli≈ütirme Best Practices:")
    
    print(f"\n1. üìÇ Dosya ve Dizin Organizasyonu:")
    print("   ‚úÖ Anlamlƒ± mod√ºl isimleri (snake_case)")
    print("   ‚úÖ Tek sorumluluk prensibi")
    print("   ‚úÖ Shallow hierarchy (fazla i√ß i√ße paket yok)")
    print("   ‚úÖ __init__.py'da public API tanƒ±mla")
    
    print(f"\n2. üìù Import Best Practices:")
    print("   ‚úÖ Standard library ‚Üí Third-party ‚Üí Local imports")
    print("   ‚úÖ Absolute imports tercih et")
    print("   ‚úÖ Wildcard imports'tan ka√ßƒ±n")
    print("   ‚úÖ Import'larƒ± alfabetik sƒ±rala")
    
    print(f"\n3. üéØ API Design:")
    print("   ‚úÖ __all__ ile public API tanƒ±mla")
    print("   ‚úÖ Private fonksiyonlarƒ± _ ile ba≈ülat")
    print("   ‚úÖ Consistent naming conventions")
    print("   ‚úÖ Backward compatibility d√º≈ü√ºn")
    
    print(f"\n4. üìö Dok√ºmantasyon:")
    print("   ‚úÖ Comprehensive docstrings")
    print("   ‚úÖ Type hints kullan")
    print("   ‚úÖ Examples ve usage patterns")
    print("   ‚úÖ Changelog tutun")
    
    print(f"\n5. üß™ Testing:")
    print("   ‚úÖ Unit tests yaz")
    print("   ‚úÖ Test discovery conventions")
    print("   ‚úÖ Mock external dependencies")
    print("   ‚úÖ Continuous integration")
    
    print(f"\n6. üöÄ Performance:")
    print("   ‚úÖ Lazy imports kullan")
    print("   ‚úÖ Circular imports'tan ka√ßƒ±n")
    print("   ‚úÖ Module-level cache kullan")
    print("   ‚úÖ Profile ve optimize et")
    
    # √ñrnek best practice kodu
    best_practice_example = '''
# Good module structure example

"""
Module: data_processor

High-level data processing utilities for scientific computing.

This module provides efficient data processing functions with
built-in validation and error handling.
"""

from typing import List, Dict, Optional, Union
import logging
from pathlib import Path

__version__ = "1.0.0"
__all__ = ['process_data', 'validate_input', 'DataProcessor']

logger = logging.getLogger(__name__)

class DataProcessor:
    """Main data processing class."""
    
    def __init__(self, config: Optional[Dict] = None):
        self.config = config or {}
        self._cache = {}
    
    def process(self, data: List[Union[int, float]]) -> List[float]:
        """Process numerical data."""
        if not self._validate_input(data):
            raise ValueError("Invalid input data")
        
        # Processing logic here
        return [float(x) * 2 for x in data]
    
    def _validate_input(self, data: List) -> bool:
        """Private validation method."""
        return isinstance(data, list) and all(
            isinstance(x, (int, float)) for x in data
        )

def process_data(data: List[Union[int, float]]) -> List[float]:
    """Public API function for data processing."""
    processor = DataProcessor()
    return processor.process(data)
'''
    
    print(f"\n--- Best Practice √ñrnek Kod ---")
    print("Mod√ºl yapƒ±sƒ± √∂rneƒüi:")
    print(best_practice_example[:500] + "...")

modul_best_practices()

print("\nüí° Mod√ºller ve Paketler ƒ∞pu√ßlarƒ±:")
print("‚úÖ Mod√ºl sistemi Python'ƒ±n code organization'ƒ±nƒ±n temelidir")
print("‚úÖ Import mekanizmasƒ±nƒ± iyi anlayƒ±n")
print("‚úÖ Paket yapƒ±sƒ±nƒ± d√º≈ü√ºnerek tasarlayƒ±n")
print("‚úÖ __all__ ile public API'yi kontrol edin")
print("‚úÖ Dok√ºmantasyonu ihmal etmeyin")
print("‚úÖ Testing ve versioning √∂nemlidir")
print("‚úÖ Performance'ƒ± g√∂z √∂n√ºnde bulundurun")

print("\nüõ†Ô∏è  Geli≈ütirme Ara√ßlarƒ±:")
print("‚Ä¢ setuptools: Paket distribution")
print("‚Ä¢ wheel: Binary distribution")
print("‚Ä¢ pip: Package management")
print("‚Ä¢ twine: PyPI upload")
print("‚Ä¢ tox: Multi-environment testing")

print("\n‚úÖ Python mod√ºl sistemi √∂ƒürenildi!")
print("‚úÖ Import mekanizmasƒ± √∂ƒürenildi!")
print("‚úÖ Paket olu≈üturma teknikleri √∂ƒürenildi!")
print("‚úÖ Best practices √∂ƒürenildi!")