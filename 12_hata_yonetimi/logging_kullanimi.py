"""
Python Logging Kullanƒ±mƒ±

Bu dosya Python'da logging sistemini kapsamlƒ± olarak ele alƒ±r.
Logger konfig√ºrasyonu, formatters, handlers, log levels,
strukturel logging ve production logging best practices.
"""

import logging
import logging.config
import logging.handlers
import json
import sys
import os
import time
from datetime import datetime
from pathlib import Path
import traceback
from typing import Dict, Any, Optional
import threading
import queue

# =============================================================================
# 1. TEMEL LOGGƒ∞NG KURULUMU
# =============================================================================

print("=== Temel Logging Kurulumu ===")

def temel_logging_ornegi():
    """Temel logging kullanƒ±mƒ±"""
    
    # Basit logging
    print("--- Basit Logging ---")
    logging.basicConfig(
        level=logging.DEBUG,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    
    # Logger olu≈ütur
    logger = logging.getLogger(__name__)
    
    # Farklƒ± seviyeler
    logger.debug("Bu bir debug mesajƒ±")
    logger.info("Bu bir info mesajƒ±")
    logger.warning("Bu bir warning mesajƒ±")
    logger.error("Bu bir error mesajƒ±")
    logger.critical("Bu bir critical mesajƒ±")
    
    print(f"\nLogger ismi: {logger.name}")
    print(f"Logger seviyesi: {logger.level}")
    print(f"Effective seviye: {logger.getEffectiveLevel()}")

temel_logging_ornegi()

# =============================================================================
# 2. LOG LEVELS VE CONFIGURATION
# =============================================================================

print("\n=== Log Levels ve Configuration ===")

def log_levels_ornegi():
    """Log levels detaylarƒ±"""
    
    print("üìä Log Levels:")
    print(f"CRITICAL: {logging.CRITICAL}")
    print(f"ERROR: {logging.ERROR}")
    print(f"WARNING: {logging.WARNING}")
    print(f"INFO: {logging.INFO}")
    print(f"DEBUG: {logging.DEBUG}")
    
    # Custom logger
    custom_logger = logging.getLogger('custom_app')
    custom_logger.setLevel(logging.INFO)
    
    # Handler olu≈ütur
    handler = logging.StreamHandler()
    formatter = logging.Formatter(
        '%(asctime)s | %(name)s | %(levelname)-8s | %(message)s'
    )
    handler.setFormatter(formatter)
    custom_logger.addHandler(handler)
    
    # Test mesajlarƒ±
    custom_logger.debug("Debug mesajƒ± (g√∂r√ºnmeyecek)")
    custom_logger.info("Info mesajƒ±")
    custom_logger.warning("Warning mesajƒ±")
    custom_logger.error("Error mesajƒ±")
    
    # Seviye deƒüi≈ütir
    print("\n--- Seviye DEBUG'a √ßevrildi ---")
    custom_logger.setLevel(logging.DEBUG)
    custom_logger.debug("≈ûimdi debug mesajƒ± g√∂r√ºn√ºyor")

log_levels_ornegi()

# =============================================================================
# 3. FORMATTERS VE HANDLERS
# =============================================================================

print("\n=== Formatters ve Handlers ===")

def formatters_handlers_ornegi():
    """Formatters ve handlers √∂rnekleri"""
    
    # Temizlik i√ßin handlers'larƒ± temizle
    for handler in logging.root.handlers[:]:
        logging.root.removeHandler(handler)
    
    # Logger olu≈ütur
    logger = logging.getLogger('format_test')
    logger.setLevel(logging.DEBUG)
    
    # Farklƒ± formatters
    formatters = {
        'basit': logging.Formatter('%(levelname)s: %(message)s'),
        'detayli': logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(filename)s:%(lineno)d - %(message)s'
        ),
        'json_benzeri': logging.Formatter(
            '{"time": "%(asctime)s", "level": "%(levelname)s", "message": "%(message)s"}'
        )
    }
    
    # Console handler
    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setLevel(logging.INFO)
    console_handler.setFormatter(formatters['detayli'])
    logger.addHandler(console_handler)
    
    # Dosya handler
    file_handler = logging.FileHandler('app.log', encoding='utf-8')
    file_handler.setLevel(logging.DEBUG)
    file_handler.setFormatter(formatters['json_benzeri'])
    logger.addHandler(file_handler)
    
    # Test mesajlarƒ±
    logger.debug("Debug mesajƒ± (sadece dosyaya)")
    logger.info("Info mesajƒ± (hem console hem dosya)")
    logger.warning("Warning mesajƒ±")
    logger.error("Error mesajƒ±")
    
    print("\nüìÅ Log dosyasƒ± olu≈üturuldu: app.log")
    
    # Dosyayƒ± oku ve g√∂ster
    try:
        with open('app.log', 'r', encoding='utf-8') as f:
            print("Dosya i√ßeriƒüi:")
            print(f.read())
    except:
        pass

formatters_handlers_ornegi()

# =============================================================================
# 4. GELƒ∞≈ûMƒ∞≈û HANDLER T√úRLER
# =============================================================================

print("\n=== Geli≈ümi≈ü Handler T√ºrleri ===")

def gelismis_handlers_ornegi():
    """Geli≈ümi≈ü handler t√ºrleri"""
    
    logger = logging.getLogger('advanced_handlers')
    logger.setLevel(logging.DEBUG)
    
    # Rotating file handler
    print("--- Rotating File Handler ---")
    rotating_handler = logging.handlers.RotatingFileHandler(
        'rotating.log',
        maxBytes=1024,  # 1KB (test i√ßin k√º√ß√ºk)
        backupCount=3,
        encoding='utf-8'
    )
    rotating_handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(levelname)s - %(message)s'
    ))
    logger.addHandler(rotating_handler)
    
    # Test i√ßin √ßok mesaj yaz
    for i in range(10):
        logger.info(f"Bu rotating log mesajƒ± {i+1}")
    
    # Time-based rotating handler
    print("\n--- Time-based Rotating Handler ---")
    time_handler = logging.handlers.TimedRotatingFileHandler(
        'timed.log',
        when='S',  # Her saniye (test i√ßin)
        interval=1,
        backupCount=3,
        encoding='utf-8'
    )
    time_handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(message)s'
    ))
    
    # Memory handler
    print("\n--- Memory Handler ---")
    memory_handler = logging.handlers.MemoryHandler(
        capacity=5,  # 5 mesaj buffer'la
        target=console_handler if 'console_handler' in locals() else None
    )
    
    # SMTP handler (sim√ºlasyon)
    print("\n--- SMTP Handler (Sim√ºlasyon) ---")
    print("SMTP Handler e-mail g√∂ndermek i√ßin kullanƒ±lƒ±r")
    print("√ñrnek: SMTPHandler('localhost', 'from@domain.com', ['to@domain.com'], 'Error')")
    
    # Syslog handler (Unix/Linux)
    if sys.platform != 'win32':
        print("\n--- Syslog Handler ---")
        try:
            syslog_handler = logging.handlers.SysLogHandler(address='/dev/log')
            syslog_handler.setFormatter(logging.Formatter(
                'Python: %(name)s - %(levelname)s - %(message)s'
            ))
            logger.addHandler(syslog_handler)
            logger.info("Syslog test mesajƒ±")
            print("Syslog mesajƒ± g√∂nderildi")
        except:
            print("Syslog kullanƒ±lamƒ±yor")

gelismis_handlers_ornegi()

# =============================================================================
# 5. STRUCTURED LOGGING
# =============================================================================

print("\n=== Structured Logging ===")

class JSONFormatter(logging.Formatter):
    """JSON formatƒ±nda log formatter"""
    
    def format(self, record):
        log_entry = {
            'timestamp': datetime.fromtimestamp(record.created).isoformat(),
            'level': record.levelname,
            'logger': record.name,
            'message': record.getMessage(),
            'module': record.module,
            'function': record.funcName,
            'line': record.lineno,
        }
        
        # Extra alanlarƒ± ekle
        if hasattr(record, 'user_id'):
            log_entry['user_id'] = record.user_id
        if hasattr(record, 'request_id'):
            log_entry['request_id'] = record.request_id
        if hasattr(record, 'extra_data'):
            log_entry['extra_data'] = record.extra_data
        
        # Exception bilgisi
        if record.exc_info:
            log_entry['exception'] = {
                'type': record.exc_info[0].__name__,
                'message': str(record.exc_info[1]),
                'traceback': traceback.format_exception(*record.exc_info)
            }
        
        return json.dumps(log_entry, ensure_ascii=False)

def structured_logging_ornegi():
    """Structured logging √∂rneƒüi"""
    
    # JSON logger setup
    json_logger = logging.getLogger('json_app')
    json_logger.setLevel(logging.INFO)
    
    # JSON handler
    json_handler = logging.StreamHandler()
    json_handler.setFormatter(JSONFormatter())
    json_logger.addHandler(json_handler)
    
    # Basit mesaj
    json_logger.info("Uygulama ba≈üladƒ±")
    
    # Extra bilgilerle
    json_logger.info(
        "Kullanƒ±cƒ± giri≈ü yaptƒ±",
        extra={
            'user_id': 12345,
            'request_id': 'req-abc-123',
            'extra_data': {
                'ip': '192.168.1.1',
                'user_agent': 'Mozilla/5.0...'
            }
        }
    )
    
    # Exception ile
    try:
        result = 1 / 0
    except Exception as e:
        json_logger.error(
            "Matematik hatasƒ± olu≈ütu",
            exc_info=True,
            extra={'user_id': 12345, 'operation': 'division'}
        )

structured_logging_ornegi()

# =============================================================================
# 6. CONTEXT VE THREAD-SAFE LOGGING
# =============================================================================

print("\n=== Context ve Thread-Safe Logging ===")

class ContextFilter(logging.Filter):
    """Context bilgilerini ekleyen filter"""
    
    def __init__(self):
        super().__init__()
        self.context = threading.local()
    
    def set_context(self, **kwargs):
        """Context bilgilerini ayarla"""
        for key, value in kwargs.items():
            setattr(self.context, key, value)
    
    def clear_context(self):
        """Context'i temizle"""
        self.context = threading.local()
    
    def filter(self, record):
        """Log record'a context bilgilerini ekle"""
        # Context bilgilerini record'a ekle
        for key, value in self.context.__dict__.items():
            setattr(record, key, value)
        return True

def context_logging_ornegi():
    """Context-aware logging √∂rneƒüi"""
    
    # Context logger setup
    context_logger = logging.getLogger('context_app')
    context_logger.setLevel(logging.INFO)
    
    # Context filter
    context_filter = ContextFilter()
    
    # Handler with context
    handler = logging.StreamHandler()
    handler.setFormatter(logging.Formatter(
        '%(asctime)s | %(request_id)s | %(user_id)s | %(levelname)s | %(message)s'
    ))
    handler.addFilter(context_filter)
    context_logger.addHandler(handler)
    
    # Context ayarla
    context_filter.set_context(
        request_id='req-123',
        user_id='user-456'
    )
    
    context_logger.info("Request ba≈üladƒ±")
    context_logger.info("Veritabanƒ± sorgusu")
    context_logger.info("Response g√∂nderildi")
    
    # Context deƒüi≈ütir
    context_filter.set_context(
        request_id='req-789',
        user_id='user-101'
    )
    
    context_logger.info("Yeni request ba≈üladƒ±")

context_logging_ornegi()

# =============================================================================
# 7. ASYNC VE QUEUE-BASED LOGGING
# =============================================================================

print("\n=== Queue-Based Logging ===")

def queue_logging_ornegi():
    """Queue-based logging √∂rneƒüi"""
    
    # Log queue olu≈ütur
    log_queue = queue.Queue()
    
    # Queue handler
    queue_handler = logging.handlers.QueueHandler(log_queue)
    
    # Queue listener
    file_handler = logging.FileHandler('queue.log', encoding='utf-8')
    file_handler.setFormatter(logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    ))
    
    queue_listener = logging.handlers.QueueListener(
        log_queue, file_handler
    )
    
    # Logger setup
    queue_logger = logging.getLogger('queue_app')
    queue_logger.addHandler(queue_handler)
    queue_logger.setLevel(logging.INFO)
    
    # Listener'ƒ± ba≈ülat
    queue_listener.start()
    
    try:
        # Test mesajlarƒ±
        for i in range(5):
            queue_logger.info(f"Queue mesajƒ± {i+1}")
        
        print("Queue-based log mesajlarƒ± g√∂nderildi")
        
        # Queue'yu i≈üle
        time.sleep(0.1)  # Listener'ƒ±n i≈ülemesi i√ßin bekle
        
    finally:
        # Temizlik
        queue_listener.stop()

queue_logging_ornegi()

# =============================================================================
# 8. CONFIGURATION Fƒ∞LE ƒ∞LE SETUP
# =============================================================================

print("\n=== Configuration File ile Setup ===")

def config_file_logging():
    """Configuration file ile logging setup"""
    
    # YAML-style config (dict olarak)
    LOGGING_CONFIG = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'standard': {
                'format': '%(asctime)s [%(levelname)s] %(name)s: %(message)s'
            },
            'detailed': {
                'format': '%(asctime)s [%(levelname)s] %(name)s %(filename)s:%(lineno)d: %(message)s'
            },
            'json': {
                'class': '__main__.JSONFormatter'
            }
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'level': 'INFO',
                'formatter': 'standard',
                'stream': 'ext://sys.stdout'
            },
            'file': {
                'class': 'logging.FileHandler',
                'level': 'DEBUG',
                'formatter': 'detailed',
                'filename': 'config_app.log',
                'encoding': 'utf-8'
            },
            'rotating': {
                'class': 'logging.handlers.RotatingFileHandler',
                'level': 'INFO',
                'formatter': 'standard',
                'filename': 'rotating_config.log',
                'maxBytes': 1024,
                'backupCount': 3,
                'encoding': 'utf-8'
            }
        },
        'loggers': {
            'app': {
                'level': 'DEBUG',
                'handlers': ['console', 'file'],
                'propagate': False
            },
            'app.database': {
                'level': 'INFO',
                'handlers': ['file', 'rotating'],
                'propagate': False
            }
        },
        'root': {
            'level': 'WARNING',
            'handlers': ['console']
        }
    }
    
    # Configuration'ƒ± uygula
    logging.config.dictConfig(LOGGING_CONFIG)
    
    # Test loggers
    app_logger = logging.getLogger('app')
    db_logger = logging.getLogger('app.database')
    
    app_logger.debug("App debug mesajƒ±")
    app_logger.info("App info mesajƒ±")
    app_logger.warning("App warning mesajƒ±")
    
    db_logger.info("Database baƒülantƒ±sƒ± kuruldu")
    db_logger.warning("Slow query tespit edildi")
    
    print("Configuration-based logging test edildi")

config_file_logging()

# =============================================================================
# 9. PRODUCTƒ∞ON LOGGING BEST PRACTICES
# =============================================================================

print("\n=== Production Logging Best Practices ===")

class ProductionLogger:
    """Production-ready logger sƒ±nƒ±fƒ±"""
    
    def __init__(self, app_name: str, log_dir: str = "logs"):
        self.app_name = app_name
        self.log_dir = Path(log_dir)
        self.log_dir.mkdir(exist_ok=True)
        
        self.setup_loggers()
    
    def setup_loggers(self):
        """Production logger'larƒ± kur"""
        
        # Formatters
        self.formatters = {
            'json': JSONFormatter(),
            'human': logging.Formatter(
                '%(asctime)s | %(levelname)-8s | %(name)s | %(message)s'
            ),
            'detailed': logging.Formatter(
                '%(asctime)s | %(levelname)-8s | %(name)s | '
                '%(filename)s:%(lineno)d | %(funcName)s | %(message)s'
            )
        }
        
        # Handlers
        self.handlers = {}
        
        # Console handler (development)
        if os.getenv('ENVIRONMENT', 'development') == 'development':
            console_handler = logging.StreamHandler()
            console_handler.setFormatter(self.formatters['human'])
            console_handler.setLevel(logging.INFO)
            self.handlers['console'] = console_handler
        
        # Application log
        app_handler = logging.handlers.RotatingFileHandler(
            self.log_dir / f'{self.app_name}.log',
            maxBytes=10*1024*1024,  # 10MB
            backupCount=10,
            encoding='utf-8'
        )
        app_handler.setFormatter(self.formatters['json'])
        app_handler.setLevel(logging.INFO)
        self.handlers['app'] = app_handler
        
        # Error log
        error_handler = logging.handlers.RotatingFileHandler(
            self.log_dir / f'{self.app_name}_error.log',
            maxBytes=10*1024*1024,
            backupCount=10,
            encoding='utf-8'
        )
        error_handler.setFormatter(self.formatters['detailed'])
        error_handler.setLevel(logging.ERROR)
        self.handlers['error'] = error_handler
        
        # Access log
        access_handler = logging.handlers.TimedRotatingFileHandler(
            self.log_dir / f'{self.app_name}_access.log',
            when='midnight',
            interval=1,
            backupCount=30,
            encoding='utf-8'
        )
        access_handler.setFormatter(self.formatters['json'])
        self.handlers['access'] = access_handler
    
    def get_logger(self, name: str, level: int = logging.INFO) -> logging.Logger:
        """Logger al"""
        logger = logging.getLogger(f'{self.app_name}.{name}')
        logger.setLevel(level)
        
        # Handlers ekle
        for handler in self.handlers.values():
            if handler not in logger.handlers:
                logger.addHandler(handler)
        
        return logger
    
    def get_access_logger(self) -> logging.Logger:
        """Access logger al"""
        logger = logging.getLogger(f'{self.app_name}.access')
        logger.setLevel(logging.INFO)
        logger.addHandler(self.handlers['access'])
        return logger

def production_logging_ornegi():
    """Production logging √∂rneƒüi"""
    
    # Production logger setup
    prod_logger_manager = ProductionLogger('myapp')
    
    # Farklƒ± logger'lar
    app_logger = prod_logger_manager.get_logger('main')
    db_logger = prod_logger_manager.get_logger('database')
    api_logger = prod_logger_manager.get_logger('api')
    access_logger = prod_logger_manager.get_access_logger()
    
    # Test mesajlarƒ±
    app_logger.info("Uygulama ba≈ülatƒ±ldƒ±")
    
    db_logger.info("Veritabanƒ± baƒülantƒ±sƒ± kuruldu")
    db_logger.warning("Slow query: SELECT * FROM users")
    
    api_logger.info("API endpoint √ßaƒürƒ±ldƒ±")
    api_logger.error("Authentication ba≈üarƒ±sƒ±z")
    
    # Access log
    access_logger.info("API request", extra={
        'method': 'GET',
        'path': '/api/users',
        'status_code': 200,
        'response_time': 0.15,
        'user_id': 12345
    })
    
    print("Production logging √∂rnekleri olu≈üturuldu")

production_logging_ornegi()

# =============================================================================
# 10. MONITORING VE ALERTING
# =============================================================================

print("\n=== Monitoring ve Alerting ===")

class LogMonitor:
    """Log monitoring sƒ±nƒ±fƒ±"""
    
    def __init__(self):
        self.error_count = 0
        self.warning_count = 0
        self.start_time = time.time()
    
    def check_log_health(self, log_file: str) -> Dict[str, Any]:
        """Log dosyasƒ± saƒülƒ±ƒüƒ±nƒ± kontrol et"""
        health_report = {
            'file': log_file,
            'exists': False,
            'size_mb': 0,
            'last_modified': None,
            'error_rate': 0,
            'warning_rate': 0
        }
        
        try:
            path = Path(log_file)
            if path.exists():
                health_report['exists'] = True
                health_report['size_mb'] = path.stat().st_size / (1024 * 1024)
                health_report['last_modified'] = datetime.fromtimestamp(
                    path.stat().st_mtime
                ).isoformat()
                
                # Son 100 satƒ±rƒ± analiz et
                with open(path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()[-100:]
                
                error_lines = [l for l in lines if 'ERROR' in l or 'CRITICAL' in l]
                warning_lines = [l for l in lines if 'WARNING' in l]
                
                health_report['error_rate'] = len(error_lines) / len(lines) if lines else 0
                health_report['warning_rate'] = len(warning_lines) / len(lines) if lines else 0
        
        except Exception as e:
            health_report['error'] = str(e)
        
        return health_report

def monitoring_ornegi():
    """Log monitoring √∂rneƒüi"""
    
    monitor = LogMonitor()
    
    # Bazƒ± log dosyalarƒ±nƒ± kontrol et
    log_files = ['app.log', 'config_app.log', 'queue.log']
    
    for log_file in log_files:
        health = monitor.check_log_health(log_file)
        print(f"\nüìä {log_file} saƒülƒ±k raporu:")
        
        if health['exists']:
            print(f"   ‚úÖ Dosya var")
            print(f"   üìè Boyut: {health['size_mb']:.2f} MB")
            print(f"   üïí Son deƒüi≈üiklik: {health['last_modified']}")
            print(f"   ‚ö†Ô∏è  Warning oranƒ±: {health['warning_rate']:.1%}")
            print(f"   ‚ùå Error oranƒ±: {health['error_rate']:.1%}")
            
            # Alert kontrolleri
            if health['error_rate'] > 0.1:  # %10'dan fazla error
                print("   üö® ALERT: Y√ºksek error oranƒ±!")
            
            if health['size_mb'] > 100:  # 100MB'dan b√ºy√ºk
                print("   üö® ALERT: Log dosyasƒ± √ßok b√ºy√ºk!")
        else:
            print(f"   ‚ùå Dosya bulunamadƒ±")

monitoring_ornegi()

print("\nüí° Logging Best Practices:")
print("‚úÖ Structured logging (JSON) kullanƒ±n")
print("‚úÖ Log levels'ƒ± doƒüru kullanƒ±n")
print("‚úÖ Sensitive bilgileri loglamayƒ±n")
print("‚úÖ Context bilgilerini ekleyin")
print("‚úÖ Log rotation kullanƒ±n")
print("‚úÖ Monitoring ve alerting kurun")
print("‚úÖ Performance'ƒ± unutmayƒ±n")
print("‚úÖ Thread-safe logging kullanƒ±n")

print("\nüõ†Ô∏è  Production Logging Checklist:")
print("‚Ä¢ JSON formatƒ±nda structured logs")
print("‚Ä¢ Request ID tracking")
print("‚Ä¢ Error aggregation")
print("‚Ä¢ Log shipping (ELK, Fluentd)")
print("‚Ä¢ Metrics ve alerts")
print("‚Ä¢ Security logging")
print("‚Ä¢ Performance profiling")

print("\n‚úÖ Python logging sistemi √∂ƒürenildi!")
print("‚úÖ Advanced handlers ve formatters √∂ƒürenildi!")
print("‚úÖ Production logging best practices √∂ƒürenildi!")
print("‚úÖ Monitoring ve alerting teknikleri √∂ƒürenildi!")